/*
 * Copyright (c) 2015 Andrew O'Malley
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package com.github.andrewoma.kwery.mappertest.example.test

import com.github.andrewoma.kwery.mappertest.example.Actor
import kotlin.properties.Delegates
import com.github.andrewoma.kwery.mappertest.example.ActorDao
import com.github.andrewoma.kwery.mappertest.example.Name
import java.time.LocalDateTime
import com.github.andrewoma.kwery.mappertest.example.Language
import com.github.andrewoma.kwery.mappertest.example.LanguageDao
import com.github.andrewoma.kwery.mappertest.example.Film
import com.github.andrewoma.kwery.mappertest.example.FilmDao
import java.time.Duration
import com.github.andrewoma.kwery.mappertest.example.FilmRating
import com.github.andrewoma.kwery.mapper.AbstractDao
import com.github.andrewoma.kwery.mappertest.example.FilmActorDao
import com.github.andrewoma.kwery.core.Session

abstract class AbstractFilmDaoTest<T, ID, D : AbstractDao<T, ID>> : AbstractDaoTest<T, ID, D>() {

    var sd: FilmData by Delegates.notNull()
    var staticId = -500

    override fun afterSessionSetup() {
        sd = initialise("filmSchema") { initialiseFilmSchema(it) }
        super.afterSessionSetup()
    }
}

//language=SQL
val filmSchema = """
    CREATE SEQUENCE actor_seq;
    CREATE TABLE actor (
        actor_id INTEGER GENERATED BY DEFAULT AS SEQUENCE actor_seq PRIMARY KEY,
        first_name CHARACTER VARYING(255) NOT NULL,
        last_name CHARACTER VARYING(255) NULL,
        last_update TIMESTAMP NOT NULL
    );

    CREATE TABLE film (
        film_id INTEGER IDENTITY,
        title CHARACTER VARYING(255) NOT NULL,
        release_year INTEGER,
        language_id INTEGER NOT NULL ,
        original_language_id INTEGER,
        LENGTH INTEGER,
        rating CHARACTER VARYING (255),
        last_update TIMESTAMP NOT NULL,
        special_features VARCHAR(255) ARRAY
    );

    CREATE TABLE language (
        language_id INTEGER IDENTITY,
        name CHARACTER VARYING(255) NOT NULL,
        last_update TIMESTAMP NOT NULL
    );

    CREATE TABLE film_actor (
        film_id INTEGER NOT NULL,
        actor_id INTEGER NOT NULL,
        last_update TIMESTAMP NOT NULL,
        PRIMARY KEY(film_id, actor_id)
    )
        """

class FilmData {
    fun <T> notNull() = Delegates.notNull<T>()

    var actorBrad: Actor by notNull()
    var actorKate: Actor by notNull()

    var languageEnglish: Language by notNull()
    var languageSpanish: Language by notNull()

    var filmUnderworld: Film by notNull()
    var filmUnderworld2: Film by notNull()
}

fun initialiseFilmSchema(session: Session): FilmData {
    for (statement in filmSchema.split(";")) {
        session.update(statement)
    }

    // Use negative ids for static content
    var id = -1000

    val d = FilmData()
    val actorDao = ActorDao(session, FilmActorDao(session))
    d.actorBrad = actorDao.insert(Actor(Name("Brad", "Pitt"), --id, LocalDateTime.now()))
    d.actorKate = actorDao.insert(Actor(Name("Kate", "Beckinsale"), --id, LocalDateTime.now()))

    val languageDao = LanguageDao(session)
    d.languageEnglish = languageDao.insert(Language(--id, "English", LocalDateTime.now()))
    d.languageSpanish = languageDao.insert(Language(--id, "Spanish", LocalDateTime.now()))

    val filmDao = FilmDao(session)
    d.filmUnderworld = filmDao.insert(Film(--id, "Static Underworld", 2003, d.languageEnglish, null, Duration.ofMinutes(121),
            FilmRating.NC_17, LocalDateTime.now(), listOf("Commentaries", "Behind the Scenes")))
    d.filmUnderworld2 = filmDao.insert(Film(--id, "Static Underworld: Evolution", 2006, d.languageEnglish, null,
            Duration.ofMinutes(106), FilmRating.R, LocalDateTime.now(), listOf("Behind the Scenes")))

    return d
}
